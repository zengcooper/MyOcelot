/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class User : TBase
{
    private int _ID;
    private string _Name;

    public int ID
    {
        get
        {
            return _ID;
        }
        set
        {
            __isset.ID = true;
            this._ID = value;
        }
    }

    public string Name
    {
        get
        {
            return _Name;
        }
        set
        {
            __isset.Name = true;
            this._Name = value;
        }
    }


    public Isset __isset;
#if !SILVERLIGHT
    [Serializable]
#endif
    public struct Isset
    {
        public bool ID;
        public bool Name;
    }

    public User()
    {
    }

    public void Read(TProtocol iprot)
    {
        iprot.IncrementRecursionDepth();
        try
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.I32)
                        {
                            ID = iprot.ReadI32();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }
        finally
        {
            iprot.DecrementRecursionDepth();
        }
    }

    public void Write(TProtocol oprot)
    {
        oprot.IncrementRecursionDepth();
        try
        {
            TStruct struc = new TStruct("User");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (__isset.ID)
            {
                field.Name = "ID";
                field.Type = TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(ID);
                oprot.WriteFieldEnd();
            }
            if (Name != null && __isset.Name)
            {
                field.Name = "Name";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Name);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }
        finally
        {
            oprot.DecrementRecursionDepth();
        }
    }

    public override string ToString()
    {
        StringBuilder __sb = new StringBuilder("User(");
        bool __first = true;
        if (__isset.ID)
        {
            if (!__first) { __sb.Append(", "); }
            __first = false;
            __sb.Append("ID: ");
            __sb.Append(ID);
        }
        if (Name != null && __isset.Name)
        {
            if (!__first) { __sb.Append(", "); }
            __first = false;
            __sb.Append("Name: ");
            __sb.Append(Name);
        }
        __sb.Append(")");
        return __sb.ToString();
    }

}

